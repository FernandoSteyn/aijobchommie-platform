# Multi-stage production Dockerfile for AI Job Chommie API
# Optimized for production deployment

# =====================================
# Stage 1: Build Stage
# =====================================
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY turbo.json ./
COPY tsconfig.json ./

# Copy workspace packages
COPY packages/api/package*.json ./packages/api/
COPY packages/shared/package*.json ./packages/shared/

# Install dependencies (including dev dependencies for building)
RUN npm ci --include=dev

# Copy source code
COPY packages/api ./packages/api
COPY packages/shared ./packages/shared

# Build shared package first
WORKDIR /app/packages/shared
RUN npm run build

# Build API
WORKDIR /app/packages/api
RUN npm run build

# =====================================
# Stage 2: Production Stage
# =====================================
FROM node:18-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create app user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S aijobchommie -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/packages/api/package*.json ./packages/api/

# Install only production dependencies
ENV NODE_ENV=production
RUN npm ci --only=production --omit=dev && npm cache clean --force

# Copy built application
COPY --from=builder --chown=aijobchommie:nodejs /app/packages/api/dist ./packages/api/dist
COPY --from=builder --chown=aijobchommie:nodejs /app/packages/shared/dist ./packages/shared/dist

# Create necessary directories
RUN mkdir -p logs uploads temp && \
    chown -R aijobchommie:nodejs logs uploads temp

# Switch to non-root user
USER aijobchommie

# Expose port
EXPOSE 3001

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start application with dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "packages/api/dist/index.js"]
